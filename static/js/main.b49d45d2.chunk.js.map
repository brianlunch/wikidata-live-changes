{"version":3,"sources":["Components/TitleContainer.js","Components/Navbar.jsx","Pages/HomePage.jsx","Utils/History.js","Backend/FeedData.js","Examples/TestFeedData.jsx","Components/GraphCard.jsx","Components/SampleGraph.jsx","Components/SimpleBarGraph.jsx","Pages/GraphPage.jsx","Backend/APIWrapper.js","Pages/MostActiveUsers.jsx","Pages/MostActivePages.jsx","Pages/UsersByMostEditsPage.jsx","Pages/TestPage.jsx","App.js","serviceWorker.js","index.js"],"names":["TitleContainer","props","state","class","this","title","subtitle","React","Component","NavbarLocal","history","activePage","window","location","href","Navbar","Collapse","Nav","Link","as","to","className","endsWith","HomePage","createBrowserHistory","FeedData","maxItems","eventSource","EventSource","changes","addEventListener","event","handleMessage","change","JSON","parse","data","unshift","length","pop","getTimeDifference","toCompare","Math","round","abs","Date","getTime","TestFeedData","useState","feedData","items","recentChanges","setRecentChanges","useEffect","setInterval","map","item","index","key","user","type","timestamp","GraphCard","onClick","push","pageLink","graph","Card","tag","Body","Title","SampleGraph","render","margin","top","right","bottom","left","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","id","color","x","y","SimpleBarGraph","tooltip","click","url","src","indexValue","loadData","a","async","getData","settings","bind","smlData","slice","fullGraph","setState","loaded","refreshInterval","method","refreshMethod","refreshTime","label","classname","clickable","keys","indexBy","padding","colorBy","borderColor","modifiers","xAxis","yAxis","enableLabel","animate","isInteractive","motionStiffness","motionDamping","GraphPage","name","getMostEditsUsers","compare","b","editcount","users","query","action","format","list","auprop","aulimit","auwitheditsonly","auactiveusers","then","allusers","sort","getMostActiveUsers","recentactions","getMostActivePages","prevTimestamp","queryRecentChanges","newTimestamp","activePages","countPageOccurances","pageTitles","ids","convertIDs","convertedIDs","forEach","pageTitle","converted","batches","Array","createBatch","results","batch","titlesString","join","params","languages","entities","labels","value","catch","err","Promise","all","n","paramsString","URLSearchParams","toString","API_ENDPOINT","fetch","response","json","tmpTimestamp","toISOString","rcprop","rclimit","rcstart","rcend","recentchanges","titleCounts","actions","titles","Object","entries","array","size","splice","MostActiveUsersGraphSettings","MostActiveUsers","MostActivePagesGraphSettings","fullData","pageAdditions","i","open","UsersByMostEditsPage","UsersByMostEditsGraphSettings","CardDeck","App","exact","path","process","component","TestPage","MostActivePages","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4VAyBeA,E,YArBX,WAAYC,GAAQ,IAAD,8BACf,+CAQKC,MAAQD,EATE,E,sEAYf,OACQ,yBAAKE,MAAM,sBACN,wBAAIA,MAAM,wBAAuB,2BAAIC,KAAKF,MAAMG,QAChD,4BAAKD,KAAKF,MAAMI,e,GAhBRC,IAAMC,W,0BC+CpBC,E,YA7Cb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEQ,QAAS,EAAKT,MAAMS,SAFlB,E,sEAMjB,IAAIC,EAAaC,OAAOC,SAASC,KACjC,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAOC,SAAR,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CACEC,GAAID,IACJE,GAAG,yBACHC,UACEV,EAAWW,SAAS,KAAO,mBAAqB,YAJpD,QASA,kBAACL,EAAA,EAAIC,KAAL,CACEC,GAAID,IACJE,GAAG,QACHC,UACEV,EAAWW,SAAS,SAAW,mBAAqB,YAJxD,QASA,kBAACL,EAAA,EAAIC,KAAL,CACEC,GAAID,IACJE,GAAG,QACHC,UACEV,EAAWW,SAAS,SAAW,mBAAqB,YAJxD,e,GA9Bcd,aCsBXe,E,YAnBb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CAAEQ,QAAS,EAAKT,MAAMS,SAHlB,E,sEAOjB,OACE,yBAAKW,UAAU,YACb,kBAAC,EAAD,CAAQX,QAASN,KAAKF,MAAMQ,UAC5B,kBAAC,EAAD,CACEL,MAAM,gBACNC,SAAS,+E,GAbIE,a,QCJRgB,gB,wBCwBAC,E,WAhBb,WAAYC,GAAW,IAAD,2BACpBtB,KAAKuB,YAAc,IAAIC,YAXf,uDAYRxB,KAAKyB,QAAU,GACfzB,KAAKsB,SAAWA,EAChBtB,KAAKuB,YAAYG,iBAAiB,WAAW,SAACC,GAAD,OAC3C,EAAKC,cAAcD,M,0DAIHA,G,wEACZE,EAASC,KAAKC,MAAMJ,EAAMK,MAChChC,KAAKyB,QAAQQ,QAAQJ,GACjB7B,KAAKyB,QAAQS,OAASlC,KAAKsB,UAAUtB,KAAKyB,QAAQU,M,+DCS1D,IAAMC,EAAoB,SAAAC,GAAS,OACjCC,KAAKC,MAAMD,KAAKE,KAAI,IAAIC,MAAOC,UAAY,IAAOL,KAErCM,EA7Bf,WAAyB,IAAD,EACHC,mBAAS,IAAIvB,EAAS,KAAlCwB,EADe,sBAEoBD,mBAAS,CACjDE,MAAOD,EAASpB,UAHI,mBAEfsB,EAFe,KAEAC,EAFA,KAUtB,OAJAC,qBAAU,WACRC,aAAY,kBAAMF,EAAiB,CAAEF,MAAOD,EAASpB,YAAY,OAChE,CAACoB,EAASpB,UAGX,6BACE,wBAAI1B,MAAM,uBAAV,wBACA,wBAAIA,MAAM,cACPgD,EAAcD,MAAMK,KAAI,SAACC,EAAMC,GAAP,OACvB,wBAAItD,MAAM,4BAA4BuD,IAAKD,GAA3C,eACWD,EAAKG,KADhB,uBACmCH,EAAKI,KADxC,YAEIJ,EAAKnD,MAFT,YAGMmC,EAAkBgB,EAAKK,WAH7B,uB,SCUKC,E,YA1Bb,WAAY7D,GAAQ,IAAD,8BACjB,4CAAMA,KAoBR8D,QAAU,WACR,EAAK7D,MAAMQ,QAAQsD,KAAK,EAAK9D,MAAM+D,WApBnC,EAAK/D,MAAQ,CACXQ,QAAS,EAAKT,MAAMS,QACpBL,MAAO,EAAKJ,MAAMI,MAClB4D,SAAU,EAAKhE,MAAMgE,SACrBC,MAAO,EAAKjE,MAAMiE,OANH,E,sEAWjB,OACE,kBAACC,EAAA,EAAD,CAAMJ,QAAS3D,KAAK2D,QAASK,IAAI,IAAI/C,UAAU,cAC7C,kBAAC8C,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,CAAYjD,UAAU,cAAcjB,KAAKF,MAAMG,OAC9CD,KAAKF,MAAMgE,Y,GAhBE1D,a,kBCAlB+D,E,2MACJC,OAAS,kBACP,yBAAKnD,UAAU,wBACb,kBAAC,IAAD,CACEe,KAAMA,EACNqC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAC/CC,OAAQ,CAAElB,KAAM,SAChBmB,OAAQ,CACNnB,KAAM,SACNoB,IAAK,OACLC,IAAK,OACLC,SAAS,EACTC,SAAS,GAEXC,QAAS,KACTC,UAAW,KACXC,WAAY,CACVC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,iBACRC,aAAc,GACdC,eAAgB,UAElBC,SAAU,CACRP,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,QACRC,cAAe,GACfC,eAAgB,UAElBE,OAAQ,CAAEC,OAAQ,UAClBC,UAAW,EACXC,WAAY,CAAEC,MAAO,cACrBC,iBAAkB,EAClBC,iBAAkB,CAAEC,KAAM,cAC1BC,WAAW,IACXC,mBAAoB,GACpBC,SAAS,EACTC,QAAS,CACP,CACEC,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,GACXC,WAAY,GACZC,YAAa,IACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACP,CACEC,GAAI,QACJC,MAAO,CACLC,eAAgB,qBAChBP,YAAa,W,6BA9DL5G,aAyEpB4B,EAAO,CACX,CACEwF,GAAI,QACJC,MAAO,qBACPzF,KAAM,CACJ,CACE0F,EAAG,QACHC,EAAG,KAEL,CACED,EAAG,aACHC,EAAG,IAEL,CACED,EAAG,OACHC,EAAG,KAEL,CACED,EAAG,QACHC,EAAG,GAEL,CACED,EAAG,SACHC,EAAG,KAEL,CACED,EAAG,MACHC,EAAG,KAEL,CACED,EAAG,MACHC,EAAG,KAEL,CACED,EAAG,OACHC,EAAG,KAEL,CACED,EAAG,UACHC,EAAG,KAEL,CACED,EAAG,QACHC,EAAG,KAEL,CACED,EAAG,aACHC,EAAG,KAEL,CACED,EAAG,SACHC,EAAG,QAMIxD,I,kBClBAyD,E,YA/Gb,WAAY/H,GAAQ,IAAD,8BACjB,4CAAMA,KAURgI,QAAU,SAASC,EAAOC,GACxB,OACE,yBAAK9G,UAAU,oBACb,4BACE+G,IAAKD,EAAMD,EAAMG,WACjBhH,UAAU,SACVhB,MAAM,uBAjBK,EAuBnBiI,SAAW,8BAAAC,EAAAC,OAAA,uDACLC,EAAU,EAAKxI,MAAMyI,SAASD,QAAQE,KAA5B,gBADL,WAAAJ,EAAA,MAEQE,KAFR,OAELrG,EAFK,OAGLwG,EAAUxG,EAAKyG,MAAM,EAAG,EAAK3I,MAAM4I,UAAY,GAAK,IACxD,EAAKC,SAAS,CACZC,QAAQ,EACR5G,KAAMwG,IANC,sCArBT,EAAK1I,MAAQ,CACX8I,QAAQ,EACR5G,KAAM,KACN0G,UAAW,EAAK7I,MAAM6I,WAGxB,EAAKR,WARY,E,iFAiCE,IAAD,OAClBlI,KAAK6I,gBAAkB3F,aAAY,0BAAAiF,EAAAC,OAAA,uDAC7BU,EAAS,EAAKjJ,MAAMyI,SAASS,cAAcR,KAAK,GADnB,WAAAJ,EAAA,MAE3BW,KAF2B,uCAGhC9I,KAAKH,MAAMyI,SAASU,e,+BAIvB,IAAI3E,EAAS,GACT4E,EAAQ,KACRC,EAAY,GACZvF,EAAU,KACVwF,GAAY,EACZtB,EAAU,KAiBd,OAhBI7H,KAAKF,MAAM4I,WACbrE,EAAS,CAAEC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDwE,GAAQ,EACRC,EAAY,uBACRlJ,KAAKH,MAAMyI,SAAS3E,UACtBA,EAAU3D,KAAKH,MAAMyI,SAAS3E,QAC9BwF,GAAY,GAEVnJ,KAAKH,MAAMyI,SAAST,UACtBA,EAAU7H,KAAKH,MAAMyI,SAAST,QAAQU,KAAKvI,SAG7CqE,EAAS,CAAEC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,GAC9CwE,GAAQ,EACRC,EAAY,wBAGZ,6BACIlJ,KAAKF,MAAM8I,OAGX,yBAAK3H,UAAWiI,GACd,kBAAC,IAAD,CACElH,KAAMhC,KAAKF,MAAMkC,KACjBoH,KAAMpJ,KAAKH,MAAMyI,SAASc,KAC1BC,QAASrJ,KAAKH,MAAMyI,SAASjF,MAC7BgB,OAAQA,EACRiF,QAAS,GACT3D,OAAQ,CAAEC,OAAQ5F,KAAKH,MAAMyI,SAAS3C,QACtC4D,QAAQ,QACRC,YAAa,CAAEtD,KAAM,QAASuD,UAAW,CAAC,CAAC,SAAU,OACrDzE,QAAS,KACTC,UAAW,KACXC,WAAY,CACVE,SAAU,EACVC,YAAa,EACbC,aAAc,GACdC,OAAQvF,KAAKH,MAAMyI,SAASoB,MAC5BjE,eAAgB,QAChBD,aAAc,IAEhBE,SAAU,CACRN,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQvF,KAAKH,MAAMyI,SAASqB,MAC5BlE,eAAgB,SAChBD,cAAe,IAEjBoE,YAAaX,EACbtF,QAASwF,EAAYxF,EAAU,aAC/BkG,QAASZ,EACTa,cAAeb,EACfc,gBAAiB,GACjBC,cAAe,GACfnC,QAASA,KApCb,kB,GAnEmBzH,aCyBd6J,E,YArBb,WAAYpK,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXQ,QAAS,EAAKT,MAAMS,QACpBwD,MAAO,EAAKjE,MAAMiE,MAClB7D,MAAO,EAAKJ,MAAMqK,MANH,E,sEAWjB,OACE,yBAAKjJ,UAAU,YACb,kBAAC,EAAD,CAAQX,QAASN,KAAKF,MAAMQ,UAC5B,kBAAC,EAAD,CAAgBL,MAAM,GAAGC,SAAUF,KAAKH,MAAMqK,OAC7ClK,KAAKF,MAAMgE,W,GAhBI1D,aCiBX+J,EAAoB,4BAAAhC,EAAAC,OAAA,uDACzBgC,EAAU,SAACjC,EAAGkC,GAAJ,OAAUA,EAAEC,UAAYnC,EAAEmC,WAUpCC,EAAQC,EATC,CACbC,OAAQ,QACRC,OAAQ,OACRC,KAAM,WACNC,OAAQ,mBACRC,QAAS,MACTC,gBAAiB,IACjBC,cAAe,KA9BC,GAiCfC,MAAK,SAAAhJ,GAAI,OAAIA,EAAKwI,MAAMS,YACxBD,MAAK,SAAAT,GAAK,OAAIA,EAAMW,KAAKd,MAbG,kBAcxBG,GAdwB,sCAwBpBY,EAAqB,4BAAAhD,EAAAC,OAAA,uDAC1BgC,EAAU,SAACjC,EAAGkC,GAAJ,OAAUA,EAAEe,cAAgBjD,EAAEiD,eAUxCb,EAAQC,EATC,CACbC,OAAQ,QACRC,OAAQ,OACRC,KAAM,WACNC,OAAQ,mBACRC,QAAS,MACTC,gBAAiB,IACjBC,cAAe,KAtDC,GAyDfC,MAAK,SAAAhJ,GAAI,OAAIA,EAAKwI,MAAMS,YACxBD,MAAK,SAAAT,GAAK,OAAIA,EAAMW,KAAKd,MAbI,kBAczBG,GAdyB,sCAgCrBc,EAAqB,SAAMC,GAAN,uBAAAnD,EAAAC,OAAA,yDACMmD,EAAmBD,GADzB,mBACzBvI,EADyB,KACVyI,EADU,KAE1BC,EAAc1I,EACjBiI,MAAK,SAAAjI,GAAa,OAAI2I,EAAoB3I,MAC1CiI,MAAK,SAAAW,GACJ,IAAMC,EAAMD,EAAWxI,KAAI,qBAAGqE,MAM9B,OALAqE,EAAWD,GAAKZ,MAAK,SAAAc,GACnBH,EAAWI,SAAQ,SAAAC,GACjBA,EAAU/L,MAAQ6L,EAAaE,EAAUxE,UAGtCmE,KAXqB,WAAAxD,EAAA,MAalBsD,GAbkB,+BAaLD,EAbK,qEAmCrBK,EAAa,SAAMD,GAAN,mBAAAzD,EAAAC,OAAA,uDAClB6D,EAAY,GACdC,EAAU,KACYA,EAAtBN,aAAeO,MAAiBC,EAAYR,EApH3B,IAqHN,CAAC,CAACA,IACXS,EAAUH,EAAQ/I,KAAI,SAAMmJ,GAAN,iBAAAnE,EAAAC,OAAA,uDACpBmE,EAAeD,EAAME,KAAK,KAC1BC,EAAS,CACbhC,OAAQ,gBACRC,OAAQ,OACRkB,IAAKW,EACL1M,MAAO,SACP6M,UAAW,MAPa,kBASnBlC,EAAMiC,EA9HG,GA+HbzB,MAAK,SAAAhJ,GAAI,OAAIA,KACbgJ,MAAK,SAAAhJ,GAAI,OAAIA,EAAK2K,YAClB3B,MAAK,SAAA2B,GACJL,EAAMP,SAAQ,SAAAvE,GACZ,IAAMoF,EAASD,EAASnF,GAAIoF,OACxBA,GAAUA,EAAM,KAAQX,EAAUzE,GAAMoF,EAAM,GAAOC,aAG5DC,OAAM,SAAAC,GAAG,OAAI,SAlBU,wCALJ,WAAA5E,EAAA,MAyBlB6E,QAAQC,IAAIZ,IAzBM,gCA0BjBJ,GA1BiB,sCAsCpBzB,EAAQ,SAARA,EAAeiC,EAAQS,GAAf,iBAAA/E,EAAAC,OAAA,gEAEJ+E,EAAe,IAAIC,gBAAgBX,GAAQY,WAC3CtF,EAAMuF,sCAAqBH,EAAe,YAHtC,WAAAhF,EAAA,MAIGoF,MAAMxF,GAAKiD,MAAK,SAAAwC,GAAQ,OAAIA,EAASC,WAJxC,2EAMA,IAANP,EANM,uDAAA/E,EAAA,MAOGqC,EAAMiC,EAAQS,EAAI,IAPrB,kGA+BR3B,EAAqB,SAAAD,GACzB,IAAIoC,EAAe,IAAIjL,KACjB+I,EAAekC,EAAaC,cAelC,OAdAD,GAA8B,IAC9BA,EAAe,IAAIjL,KAAKiL,GAAcC,cAa/B,CAHenD,EATP,CACbC,OAAQ,QACRC,OAAQ,OACRC,KAAM,gBACNiD,OAAQ,2BACRC,QAAS,MACTC,QAASJ,EACTK,MAAOzC,GAjMS,GAmM+BN,MAC/C,SAAAhJ,GAAI,OAAIA,EAAKwI,MAAMwD,iBAEExC,IASnBE,EAAsB,SAAA3I,GAC1B,IACMkL,EAAc,GACpBlL,EAAcgJ,SAAQ,SAAAlK,GACpB,IAAMqM,EAAUD,EAAYpM,EAAO5B,QAAU,EAC7CgO,EAAYpM,EAAO5B,OAASiO,EAAU,KAExC,IAAMC,EAASC,OAAOC,QAAQJ,GAAa9K,KAAI,yCAAoB,CACjEqE,GAD6C,KAE7C0G,QAF6C,SAK/C,OADAC,EAAOjD,MAVS,SAAC/C,EAAGkC,GAAJ,OAAUA,EAAE6D,QAAU/F,EAAE+F,WAWjCC,GAiCH/B,EAAc,SAACkC,EAAOC,GAE1B,IADA,IAAMrC,EAAU,GACToC,EAAMpM,OAAS,GACpBgK,EAAQtI,KAAK0K,EAAME,OAAO,EAAGD,IAE/B,OAAOrC,GC9PIuC,EAA+B,CAC1CpG,QAAS,0BAAAF,EAAAC,OAAA,kEAAAD,EAAA,MACUgD,KADV,cACHnJ,EADG,yBAEAA,GAFA,sCAITgH,YAAa,IACbD,cAAe,WACb/I,KAAKkI,YAEPkB,KAAM,CAAC,iBACP/F,MAAO,OACPqG,MAAO,QACPC,MAAO,iBACPhE,OAAQ,OACRkC,QAAS,SAASC,GAChB,OAAO9H,KAAK6H,QAAQC,EAAO,yCA2BhB4G,E,YAtBb,WAAY7O,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXQ,QAAS,EAAKT,MAAMS,SAHL,E,sEAQjB,OACE,kBAAC,EAAD,CACEwD,MACE,kBAAC,EAAD,CACE4E,WAAW,EACXJ,SAAUmG,IAGdvE,KAAM,0B,GAjBgB9J,aCjBjBuO,EAA+B,CAC1CtG,QAAS,gCAAAF,EAAAC,OAAA,kEAAAD,EAAA,MAC0BkD,GAC/B,IAAI5I,MAAOkL,gBAFN,0CACF3L,EADE,KACIwJ,EADJ,KAIPxJ,EAAOA,EAAKyG,MAAM,EAAG,IACrBzI,KAAK2I,SAAS,CACZiG,SAAU5M,EACVsJ,cAAeE,IAPV,kBASAxJ,GATA,gDAWTgH,YAAa,IACbD,cAAe,sCAAAZ,EAAAC,OAAA,kEAAAD,EAAA,MACoBkD,EAC/BrL,KAAKF,MAAMwL,gBAFA,mCACRtJ,EADQ,KACFwJ,EADE,KAIbxL,KAAK2I,SAAS,CAAE2C,cAAeE,IAC/BxJ,EAAOA,EAAKyG,MAAM,EAAG,IACjBzI,KAAKF,MAAM8O,UACTA,EAAW5O,KAAKF,MAAM8O,SAC1B5M,EAAK+J,SAAQ,SAAA8C,GAEX,IADA,IAAIxL,GAAS,EACJyL,EAAI,EAAGA,EAAIF,EAAS1M,OAAQ4M,GAAK,EACpCF,EAASE,GAAGtH,KAAOqH,EAAcrH,KACnCnE,EAAQyL,IAGG,IAAXzL,EACFuL,EAASvL,GAAO6K,SAAWW,EAAcX,QAEzCU,EAAShL,KAAKiL,MAGlBD,EAAS1D,MAAK,SAAC/C,EAAGkC,GAAJ,OAAUA,EAAE6D,QAAU/F,EAAE+F,WACtCU,EAASnG,MAAM,EAAG,IACdD,EAAUoG,EAASnG,MAAM,EAAGzI,KAAKF,MAAM4I,UAAY,GAAK,IAE5D1I,KAAK2I,SAAS,CAAEiG,SAAUA,EAAU5M,KAAMwG,MAEtCA,EAAUxG,EAAKyG,MAAM,EAAGzI,KAAKF,MAAM4I,UAAY,GAAK,IAExD1I,KAAK2I,SAAS,CAAE3G,KAAMwG,KA7BX,gDAgCfY,KAAM,CAAC,WACP/F,MAAO,KACPqG,MAAO,QACPC,MAAO,UACPhE,OAAQ,UACRhC,QAAS,SAASmE,GAChBtH,OAAOuO,KAAK,iCAAmCjH,EAAMG,WAAY,WAEnEJ,QAAS,SAASC,GAChB,OAAO9H,KAAK6H,QAAQC,EAAO,oCA0BhBkH,E,YArBb,WAAYnP,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXQ,QAAS,EAAKT,MAAMS,SAHL,E,sEAQjB,OACE,kBAAC,EAAD,CACEwD,MACE,kBAAC,EAAD,CACE4E,WAAW,EACXJ,SAAUqG,IAGdzE,KAAM,0B,GAjBqB9J,aC5DtB6O,EAAgC,CAC3C5G,QAAS,0BAAAF,EAAAC,OAAA,kEAAAD,EAAA,MACUgC,KADV,cACHnI,EADG,yBAEAA,GAFA,sCAITgH,YAAa,IACbD,cAAe,WACb/I,KAAKkI,YAEPkB,KAAM,CAAC,aACP/F,MAAO,OACPqG,MAAO,QACPC,MAAO,aACPhE,OAAQ,SACRkC,QAAS,SAASC,GAChB,OAAO9H,KAAK6H,QAAQC,EAAO,yCA0BhBkH,E,YArBb,WAAYnP,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXQ,QAAS,EAAKT,MAAMS,SAHL,E,sEAQjB,OACE,kBAAC,EAAD,CACEwD,MACE,kBAAC,EAAD,CACE4E,WAAW,EACXJ,SAAU2G,IAGd/E,KAAM,4B,GAjBqB9J,aC4DpBe,E,YAvEb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXQ,QAAS,EAAKT,MAAMS,SAJL,E,sEASjB,OACE,yBAAKW,UAAU,YACb,kBAAC,EAAD,MACA,yBAAKlB,MAAM,sCACT,yBAAKA,MAAM,0CACT,yBAAKA,MAAM,iBACT,kBAAC,EAAD,QAGJ,yBAAKA,MAAM,0CACT,yBAAKkB,UAAU,kBACb,kBAACiO,EAAA,EAAD,CAAUjO,UAAU,QAClB,kBAAC,EAAD,CACEhB,MAAM,sBACN4D,SAAS,sBACTvD,QAASN,KAAKF,MAAMQ,QACpBwD,MACE,kBAAC,EAAD,CACE4E,WAAW,EACXJ,SAAU2G,MAIhB,kBAAC,EAAD,CACEhP,MAAM,oBACN4D,SAAS,oBACTvD,QAASN,KAAKF,MAAMQ,QACpBwD,MACE,kBAAC,EAAD,CACE4E,WAAW,EACXJ,SAAUmG,OAKlB,kBAACS,EAAA,EAAD,CAAUjO,UAAU,QAClB,kBAAC,EAAD,CACEhB,MAAM,oBACN4D,SAAS,oBACTvD,QAASN,KAAKF,MAAMQ,QACpBwD,MACE,kBAAC,EAAD,CACE4E,WAAW,EACXJ,SAAUqG,MAIhB,kBAAC,EAAD,CACE1O,MAAM,6BACN4D,SAAS,GACTvD,QAASN,KAAKF,MAAMQ,QACpBwD,MAAO,kBAAC,EAAD,iB,GA7DF1D,a,OCqBR+O,MArBf,WACE,OACE,yBAAKlO,UAAU,OACb,kBAAC,IAAD,CAAQX,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8O,OAAK,EAACC,KAAMC,0BAA8BC,UAAWpO,IAC5D,kBAAC,IAAD,CAAOiO,OAAK,EAACC,KAAK,QAAQE,UAAWC,IACrC,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,uBACLE,UAAWP,IAEb,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,qBAAqBE,UAAWb,IAClD,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,qBAAqBE,UAAWE,IAClD,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,QAAQE,UAAW5M,QCd3B+M,QACW,cAA7BlP,OAAOC,SAASkP,UAEe,UAA7BnP,OAAOC,SAASkP,UAEhBnP,OAAOC,SAASkP,SAASC,MACvB,2DCZNC,IAASzL,OAAO,kBAAC,EAAD,MAAS0L,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,MAAK,SAAAmF,GACjCA,EAAaC,kB","file":"static/js/main.b49d45d2.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass TitleContainer extends React.Component {\n    constructor(props) {\n        super()\n        /*\n        state = {\n            title\n            subtitle\n        }\n\n        */\n        this.state = props\n    }\n    render() {\n        return(\n                <div class=\"col-md-5 text-left\">\n                     <h1 class=\"text-left  display-3\"><b>{this.state.title}</b></h1>\n                     <h4>{this.state.subtitle}</h4  >\n                  </div>\n        )\n    }\n}\n\nexport default TitleContainer","import React, { Component } from 'react'\nimport { Nav, Navbar } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nclass NavbarLocal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { history: this.props.history }\n  }\n  render() {\n    // var isActive = this.context.router.route.location.pathname\n    let activePage = window.location.href\n    return (\n      <Navbar>\n        <Navbar.Collapse>\n          <Nav>\n            <Nav.Link\n              as={Link}\n              to=\"/wikidata-live-changes\"\n              className={\n                activePage.endsWith('/') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Home\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/page\"\n              className={\n                activePage.endsWith('/page') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Page\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/feed\"\n              className={\n                activePage.endsWith('/feed') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Feed\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    )\n  }\n}\n\nexport default NavbarLocal\n","import React, { Component } from 'react'\nimport TitleContainer from '../Components/TitleContainer'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from '../Components/Navbar'\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { history: this.props.history }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar history={this.state.history} />\n        <TitleContainer\n          title=\"Wikidata Live\"\n          subtitle=\"A web app to visualise recent changes to Wikidata in quasi real time.\"\n        ></TitleContainer>\n      </div>\n    )\n  }\n}\n\nexport default HomePage\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","const URL = 'https://stream.wikimedia.org/v2/stream/recentchange'\n\n/** Class which wraps the Wikidata API recent changes feed */\nclass FeedData {\n  /**\n   * Create a new feed data object\n   *\n   * @param {number} maxItems - the maximum number of items to keep in the\n   *        feed.\n   */\n  constructor(maxItems) {\n    this.eventSource = new EventSource(URL)\n    this.changes = []\n    this.maxItems = maxItems\n    this.eventSource.addEventListener('message', (event) =>\n      this.handleMessage(event),\n    )\n  }\n\n  async handleMessage(event) {\n    const change = JSON.parse(event.data)\n    this.changes.unshift(change)\n    if (this.changes.length > this.maxItems) this.changes.pop()\n  }\n}\n\nexport default FeedData\n","import React, { useState, useEffect } from 'react'\nimport FeedData from '../Backend/FeedData'\n// eslint-disable-next-line\nimport style from '../style.css'\n\nfunction TestFeedData() {\n  const [feedData] = useState(new FeedData(30))\n  const [recentChanges, setRecentChanges] = useState({\n    items: feedData.changes,\n  })\n\n  useEffect(() => {\n    setInterval(() => setRecentChanges({ items: feedData.changes }), 1000)\n  }, [feedData.changes])\n\n  return (\n    <div>\n      <h3 class=\"text-blue text-left\">Most Recent Activity</h3>\n      <ul class=\"list-group\">\n        {recentChanges.items.map((item, index) => (\n          <li class=\"list-group-item text-left\" key={index}>\n            {`User ${item.user} did action ${item.type} ${\n              item.title\n            } ${getTimeDifference(item.timestamp)} seconds ago`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nconst getTimeDifference = toCompare =>\n  Math.round(Math.abs(new Date().getTime() / 1000 - toCompare))\n\nexport default TestFeedData\n","import Card from 'react-bootstrap/Card'\nimport React, { Component } from 'react'\n\nclass GraphCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n      title: this.props.title,\n      pageLink: this.props.pageLink,\n      graph: this.props.graph,\n    }\n  }\n\n  render() {\n    return (\n      <Card onClick={this.onClick} tag=\"a\" className=\"graph-card\">\n        <Card.Body>\n          <Card.Title className=\"card-title\">{this.state.title}</Card.Title>\n          {this.state.graph}\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  onClick = () => {\n    this.state.history.push(this.state.pageLink)\n  }\n}\n\nexport default GraphCard\n","import { ResponsiveLine } from '@nivo/line'\nimport React, { Component } from 'react'\n\nclass SampleGraph extends Component {\n  render = () => (\n    <div className=\"Graph-Container-Card\">\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 5, right: 55, bottom: 25, left: 30 }}\n        xScale={{ type: 'point' }}\n        yScale={{\n          type: 'linear',\n          min: 'auto',\n          max: 'auto',\n          stacked: true,\n          reverse: false,\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          orient: 'bottom',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'transportation',\n          legendOffset: 36,\n          legendPosition: 'middle',\n        }}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'count',\n          legendOffset: -40,\n          legendPosition: 'middle',\n        }}\n        colors={{ scheme: 'accent' }}\n        pointSize={5}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n          {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemBackground: 'rgba(0, 0, 0, .03)',\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n      />\n    </div>\n  )\n}\n\nconst data = [\n  {\n    id: 'japan',\n    color: 'hsl(187, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 200,\n      },\n      {\n        x: 'helicopter',\n        y: 90,\n      },\n      {\n        x: 'boat',\n        y: 112,\n      },\n      {\n        x: 'train',\n        y: 2,\n      },\n      {\n        x: 'subway',\n        y: 271,\n      },\n      {\n        x: 'bus',\n        y: 300,\n      },\n      {\n        x: 'car',\n        y: 142,\n      },\n      {\n        x: 'moto',\n        y: 197,\n      },\n      {\n        x: 'bicycle',\n        y: 107,\n      },\n      {\n        x: 'horse',\n        y: 140,\n      },\n      {\n        x: 'skateboard',\n        y: 279,\n      },\n      {\n        x: 'others',\n        y: 229,\n      },\n    ],\n  },\n]\n\nexport default SampleGraph\n","import React, { Component } from 'react'\nimport { ResponsiveBar } from '@nivo/bar'\n\nclass SimpleBarGraph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n      data: null,\n      fullGraph: this.props.fullGraph,\n    }\n\n    this.loadData()\n  }\n\n  tooltip = function(click, url) {\n    return (\n      <div className=\"iframe-container\">\n        <iframe\n          src={url + click.indexValue}\n          className=\"iframe\"\n          title=\"tooltip-option-2\"\n        />\n      </div>\n    )\n  }\n\n  loadData = async () => {\n    let getData = this.props.settings.getData.bind(this)\n    let data = await getData()\n    let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n    this.setState({\n      loaded: true,\n      data: smlData,\n    })\n  }\n\n  componentDidMount() {\n    this.refreshInterval = setInterval(async () => {\n      let method = this.props.settings.refreshMethod.bind(this)\n      await method()\n    }, this.props.settings.refreshTime)\n  }\n\n  render() {\n    let margin = {}\n    let label = null\n    let classname = ''\n    let onClick = null\n    let clickable = false\n    let tooltip = null\n    if (this.state.fullGraph) {\n      margin = { top: 5, right: 30, bottom: 80, left: 80 }\n      label = true\n      classname = 'full-graph-container'\n      if (this.props.settings.onClick) {\n        onClick = this.props.settings.onClick\n        clickable = true\n      }\n      if (this.props.settings.tooltip) {\n        tooltip = this.props.settings.tooltip.bind(this)\n      }\n    } else {\n      margin = { top: 0, right: 0, bottom: 0, left: 0 }\n      label = false\n      classname = 'Graph-Container-Card'\n    }\n    return (\n      <div>\n        {!this.state.loaded ? (\n          'Loading...'\n        ) : (\n          <div className={classname}>\n            <ResponsiveBar\n              data={this.state.data}\n              keys={this.props.settings.keys}\n              indexBy={this.props.settings.index}\n              margin={margin}\n              padding={0.3}\n              colors={{ scheme: this.props.settings.colors }}\n              colorBy=\"index\"\n              borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n              axisTop={null}\n              axisRight={null}\n              axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 30,\n                legend: this.props.settings.xAxis,\n                legendPosition: 'start',\n                legendOffset: 40,\n              }}\n              axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: this.props.settings.yAxis,\n                legendPosition: 'middle',\n                legendOffset: -60,\n              }}\n              enableLabel={label}\n              onClick={clickable ? onClick : function() {}}\n              animate={label}\n              isInteractive={label}\n              motionStiffness={90}\n              motionDamping={15}\n              tooltip={tooltip}\n            />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default SimpleBarGraph\n","import React, { Component } from 'react'\nimport TitleContainer from '../Components/TitleContainer'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from '../Components/Navbar'\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      history: this.props.history,\n      graph: this.props.graph,\n      title: this.props.name,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar history={this.state.history} />\n        <TitleContainer title=\"\" subtitle={this.props.name}></TitleContainer>\n        {this.state.graph}\n      </div>\n    )\n  }\n}\n\nexport default GraphPage\n","const API_ENDPOINT = 'https://www.wikidata.org/w/api.php'\nconst MAX_QUERY_SIZE = 50\nconst NUM_RETRIES = 5\n\n/**\n * @typedef {Object} User\n * @property {number} userid - The user's id\n * @property {number} name - The user's name\n * @property {number} editcount - The number of edits the user did\n * @property {number} recentactions - The number of actions a user did within\n *           30 days\n * @property {Array} groups - An array of strings which contains the groups\n *           the user belongs in. For example if the user contains \"bot\", it is\n *           a non human user\n */\n\n/**\n * Returns a list of 500 users who were recently active within 30 days which is\n * sorted by the most edits in descending order\n *\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\n *          objects\n */\nexport const getMostEditsUsers = async () => {\n  const compare = (a, b) => b.editcount - a.editcount\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'allusers',\n    auprop: 'editcount|groups',\n    aulimit: 'max',\n    auwitheditsonly: '1',\n    auactiveusers: '1',\n  }\n  const users = query(params, NUM_RETRIES)\n    .then(data => data.query.allusers)\n    .then(users => users.sort(compare))\n  return users\n}\n\n/**\n * Returns a list of 500 users who were recently active within 30 days which is\n * sorted by the most recent actions in descending order\n *\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\n *          objects\n */\nexport const getMostActiveUsers = async () => {\n  const compare = (a, b) => b.recentactions - a.recentactions\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'allusers',\n    auprop: 'editcount|groups',\n    aulimit: 'max',\n    auwitheditsonly: '1',\n    auactiveusers: '1',\n  }\n  const users = query(params, NUM_RETRIES)\n    .then(data => data.query.allusers)\n    .then(users => users.sort(compare))\n  return users\n}\n\n/**\n * @typedef {Object} PageInfo\n * @property {string} id - The id of the page\n * @property {actions} actions - Number of actions which has been performed on\n *           that page\n * @property {string} title - The title of the page\n */\n\n/**\n * Returns an array of most active pages from recent changes feed\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Promise<PageInfo[] | string>}\n */\nexport const getMostActivePages = async prevTimestamp => {\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\n  const activePages = recentChanges\n    .then(recentChanges => countPageOccurances(recentChanges))\n    .then(pageTitles => {\n      const ids = pageTitles.map(({ id }) => id)\n      convertIDs(ids).then(convertedIDs => {\n        pageTitles.forEach(pageTitle => {\n          pageTitle.title = convertedIDs[pageTitle.id]\n        })\n      })\n      return pageTitles\n    })\n  return [await activePages, newTimestamp]\n}\n\n/**\n * Returns an array of most users pages from recent changes feed\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Promise<User[] | string>}\n */\nexport const getRecentActiveUsers = async prevTimestamp => {\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\n  const activeUsers = recentChanges.then(activeUsers => countUsers(activeUsers))\n  return [await activeUsers, newTimestamp]\n}\n\n/**\n * Returns a map where the key is the id and the value is the associated label\n *\n * @param {Array<string>} ids - An array of ids to retrieve the label of\n * @return {Promise<Map<string, string>>}\n */\nexport const convertIDs = async ids => {\n  const converted = {}\n  let batches = null\n  if (ids instanceof Array) batches = createBatch(ids, MAX_QUERY_SIZE)\n  else batches = [[ids]]\n  const results = batches.map(async batch => {\n    const titlesString = batch.join('|')\n    const params = {\n      action: 'wbgetentities',\n      format: 'json',\n      ids: titlesString,\n      props: 'labels',\n      languages: 'en',\n    }\n    return query(params, NUM_RETRIES)\n      .then(data => data)\n      .then(data => data.entities)\n      .then(entities => {\n        batch.forEach(id => {\n          const labels = entities[id].labels\n          if (labels && labels['en']) converted[id] = labels['en'].value\n        })\n      })\n      .catch(err => null)\n  })\n  await Promise.all(results)\n  return converted\n}\n\n// ~ Helper Functions ---------------------------------------------------------\n\n/**\n * Returns a the response of a query to the Wikidata API endpoint\n *\n * @param {Object} params - Object of parameters to use when querying\n * @param {number} n - Number of times to retry if failure occurs\n * @return {Promise<Object>}\n */\nconst query = async (params, n) => {\n  try {\n    const paramsString = new URLSearchParams(params).toString()\n    const url = API_ENDPOINT + '?' + paramsString + '&origin=*'\n    return await fetch(url).then(response => response.json())\n  } catch (err) {\n    if (n === 1) throw err\n    return await query(params, n - 1)\n  }\n}\n\n/**\n * @typedef {Object} recentChanges\n * @property {number} ns\n * @property {number} old_revid - The old revision id\n * @property {number} pageid - The page id\n * @property {number} rcid - The recent change id\n * @property {number} revid - The current revision id\n * @property {string} timestamp - Timestamp of change\n * @property {string} title - Title of the page changed\n * @property {string} type - Type of action e.g. \"new\", \"edit\"\n * @property {string} user - The username of the editor\n */\n\n/**\n * Queries the API for the most recent changes\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Array<Promise<recentChanges[]> | string>}\n */\nconst queryRecentChanges = prevTimestamp => {\n  let tmpTimestamp = new Date()\n  const newTimestamp = tmpTimestamp.toISOString()\n  tmpTimestamp = tmpTimestamp - 1000\n  tmpTimestamp = new Date(tmpTimestamp).toISOString()\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'recentchanges',\n    rcprop: 'title|ids|timestamp|user',\n    rclimit: 'max',\n    rcstart: tmpTimestamp,\n    rcend: prevTimestamp,\n  }\n  const recentChanges = query(params, NUM_RETRIES).then(\n    data => data.query.recentchanges\n  )\n  return [recentChanges, newTimestamp]\n}\n\n/**\n * Returns the number of times a page appeared on the recent changes feed sorted by\n * number of actions done on the page\n *\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\n */\nconst countPageOccurances = recentChanges => {\n  const compare = (a, b) => b.actions - a.actions\n  const titleCounts = {}\n  recentChanges.forEach(change => {\n    const actions = titleCounts[change.title] || 0\n    titleCounts[change.title] = actions + 1\n  })\n  const titles = Object.entries(titleCounts).map(([id, actions]) => ({\n    id,\n    actions,\n  }))\n  titles.sort(compare)\n  return titles\n}\n\n/**\n * Returns the number of times a user appeared on the recent changes feed sorted by\n * number of actions done by that user\n *\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\n */\nconst countUsers = recentChanges => {\n  const compare = (a, b) => b.actions - a.actions\n  const userCounts = {}\n  recentChanges.forEach(change => {\n    const user = change.user\n    const numActions = userCounts[user] || 0\n    userCounts[user] = numActions + 1\n  })\n  const users = Object.entries(userCounts).map(([username, actions]) => ({\n    username,\n    actions,\n  }))\n  users.sort(compare)\n  return users\n}\n\n/**\n * Splits up an array into smaller arrays\n *\n * @param {Array} array - Array to create batches from\n * @param {number} size - Batch size\n * @return {Array} batches - An array containing the batches which are of\n *         length size\n */\nconst createBatch = (array, size) => {\n  const batches = []\n  while (array.length > 0) {\n    batches.push(array.splice(0, size))\n  }\n  return batches\n}\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostActiveUsers } from '../Backend/APIWrapper'\n\nexport const MostActiveUsersGraphSettings = {\n  getData: async function() {\n    let data = await getMostActiveUsers()\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: function() {\n    this.loadData()\n  },\n  keys: ['recentactions'],\n  index: 'name',\n  xAxis: 'users',\n  yAxis: 'recent actions',\n  colors: 'set3',\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\n  },\n}\n\nclass MostActiveUsers extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <GraphPage\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={MostActiveUsersGraphSettings}\n          />\n        }\n        name={'Most Active Users'}\n      />\n    )\n  }\n}\n\nexport default MostActiveUsers\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostActivePages } from '../Backend/APIWrapper'\n\n//This doesn't really work: currently, previous changes may get counted more than once.\n//It does look good though.\nexport const MostActivePagesGraphSettings = {\n  getData: async function() {\n    let [data, newTimestamp] = await getMostActivePages(\n      new Date().toISOString()\n    )\n    data = data.slice(0, 50)\n    this.setState({\n      fullData: data,\n      prevTimestamp: newTimestamp,\n    })\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: async function() {\n    let [data, newTimestamp] = await getMostActivePages(\n      this.state.prevTimestamp\n    )\n    this.setState({ prevTimestamp: newTimestamp })\n    data = data.slice(0, 50)\n    if (this.state.fullData) {\n      let fullData = this.state.fullData\n      data.forEach(pageAdditions => {\n        let index = -1\n        for (let i = 0; i < fullData.length; i += 1) {\n          if (fullData[i].id === pageAdditions.id) {\n            index = i\n          }\n        }\n        if (index !== -1) {\n          fullData[index].actions += pageAdditions.actions\n        } else {\n          fullData.push(pageAdditions)\n        }\n      })\n      fullData.sort((a, b) => b.actions - a.actions)\n      fullData.slice(0, 50)\n      let smlData = fullData.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ fullData: fullData, data: smlData })\n    } else {\n      let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ data: smlData })\n    }\n  },\n  keys: ['actions'],\n  index: 'id',\n  xAxis: 'pages',\n  yAxis: 'actions',\n  colors: 'pastel1',\n  onClick: function(click) {\n    window.open('https://www.wikidata.org/wiki/' + click.indexValue, '_blank')\n  },\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/')\n  },\n}\n\nclass UsersByMostEditsPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <GraphPage\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={MostActivePagesGraphSettings}\n          />\n        }\n        name={'Most Active Pages'}\n      />\n    )\n  }\n}\nexport default UsersByMostEditsPage\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostEditsUsers } from '../Backend/APIWrapper'\n\nexport const UsersByMostEditsGraphSettings = {\n  getData: async function() {\n    let data = await getMostEditsUsers()\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: function() {\n    this.loadData()\n  },\n  keys: ['editcount'],\n  index: 'name',\n  xAxis: 'users',\n  yAxis: 'edit count',\n  colors: 'paired',\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\n  },\n}\n\nclass UsersByMostEditsPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <GraphPage\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={UsersByMostEditsGraphSettings}\n          />\n        }\n        name={'Users By Most Edits'}\n      />\n    )\n  }\n}\nexport default UsersByMostEditsPage\n","import React, { Component } from 'react'\nimport Navbar from '../Components/Navbar'\nimport GraphCard from '../Components/GraphCard'\nimport TestFeedData from '../Examples/TestFeedData'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport SampleGraph from '../Components/SampleGraph'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { MostActiveUsersGraphSettings } from './MostActiveUsers'\nimport { MostActivePagesGraphSettings } from './MostActivePages'\nimport { UsersByMostEditsGraphSettings } from './UsersByMostEditsPage'\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar />\n        <div class=\"row justify-content-left text-dark\">\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-4\">\n            <div class=\"feedContainer\">\n              <TestFeedData></TestFeedData>\n            </div>\n          </div>\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-8\">\n            <div className=\"deck-container\">\n              <CardDeck className=\"deck\">\n                <GraphCard\n                  title=\"Users by most edits\"\n                  pageLink=\"users-by-most-edits\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      fullGraph={false}\n                      settings={UsersByMostEditsGraphSettings}\n                    />\n                  }\n                />\n                <GraphCard\n                  title=\"Most Active Users\"\n                  pageLink=\"most-active-users\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      fullGraph={false}\n                      settings={MostActiveUsersGraphSettings}\n                    />\n                  }\n                />\n              </CardDeck>\n              <CardDeck className=\"deck\">\n                <GraphCard\n                  title=\"Most Active Pages\"\n                  pageLink=\"most-active-pages\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      fullGraph={false}\n                      settings={MostActivePagesGraphSettings}\n                    />\n                  }\n                />\n                <GraphCard\n                  title=\"Sample Graph: link to home\"\n                  pageLink=\"\"\n                  history={this.state.history}\n                  graph={<SampleGraph />}\n                />\n              </CardDeck>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default HomePage\n","import React from 'react'\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport HomePage from './Pages/HomePage'\nimport history from './Utils/History'\nimport TestFeedData from './Examples/TestFeedData'\nimport TestPage from './Pages/TestPage'\nimport UsersByMostEditsPage from './Pages/UsersByMostEditsPage'\nimport MostActiveUsers from './Pages/MostActiveUsers'\nimport MostActivePages from './Pages/MostActivePages'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + '/'} component={HomePage} />\n          <Route exact path=\"/page\" component={TestPage} />\n          <Route\n            exact\n            path=\"/users-by-most-edits\"\n            component={UsersByMostEditsPage}\n          />\n          <Route exact path=\"/most-active-users\" component={MostActiveUsers} />\n          <Route exact path=\"/most-active-pages\" component={MostActivePages} />\n          <Route exact path=\"/feed\" component={TestFeedData} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}